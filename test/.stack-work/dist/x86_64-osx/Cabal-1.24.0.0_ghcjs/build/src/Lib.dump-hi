
==================== FINAL INTERFACE ====================
2017-07-12 10:52:27.370819 UTC

interface Hu8sJdvscNOAH2DXsvfzTc:Lib 7103
  interface hash: b280660fa9a8cfa2780050ad392ca7c3
  ABI hash: f3504f60d06474a1030906a64d59dfc7
  export-list hash: f237cac7bfdd2de083aea16d81bf4ab3
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5c6b47eed22429c8da1d05ac1153b099
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.bigger'
  Lib.forTest
  Lib.maximum'
  Lib.someFunc
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-0.5.1.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.Base bf56e93e483b6a281ad97fedb63bfd04
import  -/  base-4.8.2.0:GHC.Real 19512fd0180d01f4277618956f9ad661
import  -/  base-4.8.2.0:Prelude aeed44d4e8d251a340a1597dd2a0cbc5
import  -/  base-4.8.2.0:System.IO 4a32b9ceb88d62fb6f92a1ba2731d5e1
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
a972336a291fba66d3d96bc4be1d355e
  bigger' :: GHC.Classes.Ord a => a -> a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLC(C(S))LLL),1*U(A,A,A,A,1*C1(C1(U)),A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a $dOrd :: GHC.Classes.Ord a x :: a y :: a ->
                 case GHC.Classes.> @ a $dOrd x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
011df7cbba2083014fed985e5d970e67
  forTest :: GHC.Real.Integral a => a -> GHC.Base.String
  {- Arity: 2,
     Strictness: <S(SLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: (\ @ a $dIntegral :: GHC.Real.Integral a eta :: a ->
                 let {
                   $dReal :: GHC.Real.Real a = GHC.Real.$p1Integral @ a $dIntegral
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Real @ a $dReal
                 } in
                 let {
                   $dOrd :: GHC.Classes.Ord a = GHC.Real.$p2Real @ a $dReal
                 } in
                 case GHC.Classes.>
                        @ a
                        $dOrd
                        eta
                        (GHC.Num.fromInteger @ a $dNum Lib.forTest4) of wild {
                   GHC.Types.False
                   -> case GHC.Classes.<
                             @ a
                             $dOrd
                             eta
                             (GHC.Num.fromInteger @ a $dNum Lib.forTest4) of wild1 {
                        GHC.Types.False -> Lib.forTest3 GHC.Types.True -> Lib.forTest2 }
                   GHC.Types.True -> Lib.forTest1 }) -}
56989db560b6a0318b56997ff59dfde7
  forTest1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "positive"#) -}
aa9f0a839728788bf313b0e16d8cb68a
  forTest2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "negative"#) -}
9c6dc0be3c3bccf96c87ebb696392e5f
  forTest3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "zero"#) -}
e688072d145c210a905718d388c24a6f
  forTest4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 0) -}
a889bc89fa1a9fe6a988328eae0daf07
  maximum' :: GHC.Classes.Ord a => [a] -> a
  {- Arity: 2, Strictness: <L,U(A,A,A,A,C(C1(U)),A,A,A)><S,1*U> -}
241569cb7cef370ff4276698b9c97fb8
  someFunc :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.someFunc1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
3b2c65a765978feafff77beae4dbaac2
  someFunc1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Lib.someFunc2
                   GHC.Types.True
                   eta) -}
b9f1d5787ddd0760361b40160cd82458
  someFunc2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "someFunc"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

